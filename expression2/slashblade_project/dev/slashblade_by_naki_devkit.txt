@name SlashBlade_Project/dev/SlashBlade by Naki DevKit
@persist BoneID Frame ParentToLocal Axis CurAng:angle CurPitch [Config StoreData AnimationData Angles]:table Play FrameTime [AnimationName Animation]:string
@persist EGP2:entity EGP:wirelink
if(first()){
    #----- DEVKIT Ver1.0 -----
    
    Config=table(
    "NextBone"="up",
    "PreviousButton"="down",
    
    "NextFrame"="right",
    "PreviousFrame"="left",
    "PlayButton"="space",
    
    "SwitchAxis"="r",
    "RotateBone"="mouse_left",
    "ParentToLocal"="mouse_right"
    )
    
    Animation="judgement_cut_sheath"
    
    #----- CODE -----
    
    holoCreate(1000)
    holoPos(1000,entity():toWorld(vec(0,0,0)))
    holoAng(1000,ang(0,entity():angles():yaw(),0))
    holoParent(1000,entity())
    holoModel(1000,owner():model())
    holoAlpha(1000,255/2)
    
    holoCreate(1001)
    holoPos(1001,entity():toWorld(vec(0,0,0)))
    holoAng(1001,entity():toWorld(ang(0,0,0)))
    holoParent(1001,entity())
    holoModel(1001,"models/sprops/geometry/fring_48.mdl")
    holoScale(1001,vec(0.2))
    
    holoCreate(1)
    holoPos(1,holoEntity(1000):toWorld(vec(0,0,owner():height()/2)))
    holoAng(1,holoEntity(1000):toWorld(ang(0,0,0)))
    holoParent(1,holoEntity(1000))
    
    holoCreate(2)
    holoPos(2,holoEntity(1):toWorld(vec(0,6,22)))
    holoAng(2,holoEntity(1):toWorld(ang(0,0,0)))
    holoParent(2,holoEntity(1))
    
    holoCreate(3)
    holoPos(3,holoEntity(2):toWorld(vec(0,10,0)))
    holoAng(3,holoEntity(2):toWorld(ang(0,0,0)))
    holoParent(3,holoEntity(2))
    
    holoCreate(4)
    holoPos(4,holoEntity(3):toWorld(vec(0,10,0)))
    holoAng(4,holoEntity(3):toWorld(ang(0,0,0)))
    holoParent(4,holoEntity(3))
    
    holoCreate(5)
    holoPos(5,holoEntity(4):toWorld(vec(0,4,0)))
    holoAng(5,holoEntity(4):toWorld(ang(0,0,0)))
    holoParent(5,holoEntity(4))
    
    
    holoCreate(6)
    holoPos(6,holoEntity(1):toWorld(vec(0,-6,22)))
    holoAng(6,holoEntity(1):toWorld(ang(0,0,0)))
    holoParent(6,holoEntity(1))
    
    holoCreate(7)
    holoPos(7,holoEntity(6):toWorld(vec(0,-10,0)))
    holoAng(7,holoEntity(6):toWorld(ang(0,0,0)))
    holoParent(7,holoEntity(6))
    
    holoCreate(8)
    holoPos(8,holoEntity(7):toWorld(vec(0,-10,0)))
    holoAng(8,holoEntity(7):toWorld(ang(0,0,0)))
    holoParent(8,holoEntity(7))
    
    holoCreate(9)
    holoPos(9,holoEntity(8):toWorld(vec(0,-4,0)))
    holoAng(9,holoEntity(8):toWorld(ang(0,0,0)))
    holoParent(9,holoEntity(8))
    
    holoCreate(10)
    holoPos(10,holoEntity(9):toWorld(vec(0,0,0)))
    holoAng(10,holoEntity(9):toWorld(ang(90,0,0)))
    holoParent(10,9)
    holoModel(10,"models/weapons/c_models/c_shogun_katana/c_shogun_katana.mdl")
    
    holoCreate(11)
    holoPos(11,holoEntity(5):toWorld(vec(10,0,0)))
    holoAng(11,holoEntity(5):toWorld(ang(90,180,0)))
    holoParent(11,5)
    holoScale(11,vec())
    
    local I = 12
    holoCreate(I)
    holoPos(I,holoEntity(I-1):toWorld(vec(0,0,5.7)))
    holoAng(I,holoEntity(I-1):toWorld(ang(0,0,-1)))
    holoParent(I,I-1)
    
    local I = I + 1
    holoCreate(I)
    holoPos(I,holoEntity(I-1):toWorld(vec(0,0.07,4.1)))
    holoAng(I,holoEntity(I-1):toWorld(ang(0,0,-1.5)))
    holoParent(I,I-1)
    
    local I = I + 1
    holoCreate(I)
    holoPos(I,holoEntity(I-1):toWorld(vec(0,0.068,4.1)))
    holoAng(I,holoEntity(I-1):toWorld(ang(0,0,-1.4)))
    holoParent(I,I-1)
    
    local I = I + 1
    holoCreate(I)
    holoPos(I,holoEntity(I-1):toWorld(vec(0,0.066,4.1)))
    holoAng(I,holoEntity(I-1):toWorld(ang(0,0,-1.3)))
    holoParent(I,I-1)
    
    local I = I + 1
    holoCreate(I)
    holoPos(I,holoEntity(I-1):toWorld(vec(0,0.064,4.1)))
    holoAng(I,holoEntity(I-1):toWorld(ang(0,0,-1.2)))
    holoParent(I,I-1)
    
    local I = I + 1
    holoCreate(I)
    holoPos(I,holoEntity(I-1):toWorld(vec(0,0.062,4.1)))
    holoAng(I,holoEntity(I-1):toWorld(ang(0,0,-1.1)))
    holoParent(I,I-1)
    
    local I = I + 1
    holoCreate(I)
    holoPos(I,holoEntity(I-1):toWorld(vec(0,0.06,4.1)))
    holoAng(I,holoEntity(I-1):toWorld(ang(0,0,-1.0)))
    holoParent(I,I-1)
    
    local I = I + 1
    holoCreate(I)
    holoPos(I,holoEntity(I-1):toWorld(vec(0,0.058,4.1)))
    holoAng(I,holoEntity(I-1):toWorld(ang(0,0,-0.9)))
    holoParent(I,I-1)
    
    local I = I + 1
    holoCreate(I)
    holoPos(I,holoEntity(I-1):toWorld(vec(0,0.056,4.1)))
    holoAng(I,holoEntity(I-1):toWorld(ang(0,0,-0.8)))
    holoParent(I,I-1)
    
    local I = I + 1
    holoCreate(I)
    holoPos(I,holoEntity(I-1):toWorld(vec(0,0.054,4.1)))
    holoAng(I,holoEntity(I-1):toWorld(ang(0,0,-0.7)))
    holoParent(I,I-1)
    
    local I = I + 1
    holoCreate(I)
    holoPos(I,holoEntity(I-1):toWorld(vec(0,0.052,4.1)))
    holoAng(I,holoEntity(I-1):toWorld(ang(0,0,-0.6)))
    holoParent(I,I-1)
    
    local I = I + 1
    holoCreate(I)
    holoPos(I,holoEntity(I-1):toWorld(vec(0,0.05,4.1)))
    holoAng(I,holoEntity(I-1):toWorld(ang(0,0,-0.5)))
    holoParent(I,I-1)
    
    for(I=12,25){
        holoModel(I,"models/sprops/cuboids/height06/size_1/cube_6x6x6.mdl")
        holoMaterial(I,"models/debug/debugwhite")
        holoScale(I,vec(0.25,0.55,0.7))
        holoColor(I,vec(75))
    }
    
    
    for(I=1,9){
        holoScale(I,vec(0.25))
    }
    
    
    #include "SlashBlade_Project/dev/ANIM_Lib"
    BoneID=Axis=ParentToLocal=1
    AnimationName=Animation:upper()
    
    #[
    AnimationData=table(table())
    for(I=1,9){
        AnimationData[1,table][I,angle]=ang(0,0,0)
    }
    AnimationData[1,table][10,number]=30
    AnimationData[1,table][11,number]=60
    
    AnimationName="Undefined_Animation"
    ]#
    Frame=1
    owner():plySetJumpPower(0)
    
    propSpawnUndo(0)
    EGP2=spawnEgpHud(entity():pos(),entity():angles(),1)
    timer("hudcreate",100)
    Play=CurPitch=0
}
if(clk("hudcreate")){
    Animation=Animation:upper():find("ANIM_") ? Animation : "ANIM_"+Animation:upper()
    switch(Animation){
        case "ANIM_BASE_TEST",
            AnimationData=ANIM_BASE_TEST
        break
        case "ANIM_TPOSE",
            AnimationData=ANIM_TPOSE
        break
        case "ANIM_IDLE_01",
            AnimationData=ANIM_IDLE_01
        break
        case "ANIM_ATTACK_01",
            AnimationData=ANIM_ATTACK_01
        break
        case "ANIM_UPPER_01",
            AnimationData=ANIM_UPPER_01
        break
        case "ANIM_UPPER_01_SHEATH",
            AnimationData=ANIM_UPPER_01_SHEATH
        break
        case "ANIM_UPPER_02",
            AnimationData=ANIM_UPPER_02
        break
        case "ANIM_UPPER_02_SHEATH",
            AnimationData=ANIM_UPPER_02_SHEATH
        break
        case "ANIM_DOWN_01",
            AnimationData=ANIM_DOWN_01
        break
        case "ANIM_DOWN_01_SHEATH",
            AnimationData=ANIM_DOWN_01_SHEATH
        break
        case "ANIM_FORWARD_01",
            AnimationData=ANIM_FORWARD_01
        break
        case "ANIM_FORWARD_01_SHEATH",
            AnimationData=ANIM_FORWARD_01_SHEATH
        break
        case "ANIM_JUDGEMENT_CUT_START",
            AnimationData=ANIM_JUDGEMENT_CUT_START
        break
        case "ANIM_JUDGEMENT_CUT",
            AnimationData=ANIM_JUDGEMENT_CUT
        break
        case "ANIM_JUDGEMENT_CUT_SHEATH",
            AnimationData=ANIM_JUDGEMENT_CUT_SHEATH
        break
        case "ANIM_TEST",
            AnimationData=ANIM_TEST
        break
        case "ANIM_NEW",
            AnimationName="UNNAMED"
            AnimationData=ANIM_TPOSE
        break
        default,
            AnimationName="UNKNOWN"
            AnimationData=ANIM_TPOSE
        break
    }
    for(I=1,9){
        holoAng(I,holoEntity(I):parent():toWorld(AnimationData[clamp(Frame,1,AnimationData:count()),table][I,angle]))
    }
    EGP2:use()
    EGP=EGP2:wirelink()
    Reso=vec2(egpScrW(owner()),egpScrH(owner()))/2
    
    local Color1=vec(60)
    local Color2=vec(35)
    
    local I=1 #Outer Base
    EGP:egpBox(I,vec2(Reso:x()*2-300/2,400/2),vec2(300,400))
    EGP:egpColor(I,Color1)
    
    local I=2 #Inner Box
    EGP:egpBox(I,vec2(50,30/2),vec2(200,400-30)-vec2(8))
    EGP:egpColor(I,Color2)
    EGP:egpParent(I,1)
    
    local I=3 #Animation Name Box
    EGP:egpBox(I,vec2(25,-200+30/2),vec2(300-50,30)-vec2(8))
    EGP:egpColor(I,Color2)
    EGP:egpParent(I,1)
    
    local I=4 #Frame Number Box
    EGP:egpBox(I,vec2(-100,-200+30*1.5),vec2(100,30)-vec2(8))
    EGP:egpColor(I,Color2)
    EGP:egpParent(I,1)
    
    local I=5 #Frame Time Box
    EGP:egpBox(I,vec2(-100-25,-200+(30/2)+60),vec2(50,30)-vec2(8))
    EGP:egpColor(I,Color2)
    EGP:egpParent(I,1)
    
    local I=6 #Animation Time Box
    EGP:egpBox(I,vec2(-100-25,-200+(30/2)),vec2(50,30)-vec2(8))
    EGP:egpColor(I,Color2)
    EGP:egpParent(I,1)
    
    local I=7 #Divider
    EGP:egpBox(I,vec2(0,-200+30),vec2(300,2)-vec2(8,0))
    EGP:egpColor(I,Color2)
    EGP:egpParent(I,1)
    
    local I=8
    EGP:egpText(I,"Undefined_Animation",vec2())
    EGP:egpSize(I,16)
    EGP:egpAlign(I,1,1)
    EGP:egpParent(I,3)
    
    local I=9
    EGP:egpText(I,"FRAME_001",vec2())
    EGP:egpSize(I,16)
    EGP:egpAlign(I,1,1)
    EGP:egpParent(I,4)
    
    local I=10
    EGP:egpText(I,"30",vec2())
    EGP:egpSize(I,16)
    EGP:egpAlign(I,1,1)
    EGP:egpParent(I,5)
    
    local I=11
    EGP:egpText(I,"60",vec2())
    EGP:egpSize(I,16)
    EGP:egpAlign(I,1,1)
    EGP:egpParent(I,6)
    
    local I=12 #Divider
    EGP:egpBox(I,vec2(0,-157),vec2(200,1)-vec2(8,0))
    EGP:egpParent(I,2)
    
    CurrentFrame=AnimationData[1,table]
    for(C=1,10){
        local Offset=25*(C-1)
        local Index=12+C
        EGP:egpText(Index,select(C,"BONE","Root","L_UArm","L_FArm","L_Hand","L_Attach","R_UArm","R_FArm","R_Hand","R_Attach"),vec2(-85,-170+Offset))
        EGP:egpSize(Index,18)
        EGP:egpAlign(Index,0,1)
        EGP:egpParent(Index,2)
        
        local Index=13+C*10
        EGP:egpText(Index,C==1 ? "ANGLE" : ceil(CurrentFrame[C-1,angle],3):toString(),vec2(85,-170+Offset))
        EGP:egpSize(Index,18)
        EGP:egpAlign(Index,2,1)
        EGP:egpParent(Index,2)
    }
}

interval(100)
WeaponOK=owner():weapon():type()=="none"

if(changed(owner():keyPressed(Config["NextBone",string]))&owner():keyPressed(Config["NextBone",string])&WeaponOK){
    BoneID++
}
if(changed(owner():keyPressed(Config["PreviousButton",string]))&owner():keyPressed(Config["PreviousButton",string])&WeaponOK){
    BoneID--
}
if(changed(owner():keyPressed(Config["NextFrame",string]))&owner():keyPressed(Config["NextFrame",string])&WeaponOK){
    Frame++
    Frame=clamp(Frame,0,AnimationData:count()+1)
    if(Frame<=0){
        Frame=AnimationData:count()
    }
    if(Frame>AnimationData:count()){
        Frame=1
    }
    for(I=1,9){
        holoAng(I,holoEntity(I):parent():toWorld(AnimationData[clamp(Frame,1,AnimationData:count()),table][I,angle]))
    }
}
if(changed(owner():keyPressed(Config["PreviousFrame",string]))&owner():keyPressed(Config["PreviousFrame",string])&WeaponOK){
    Frame--
    Frame=clamp(Frame,0,AnimationData:count()+1)
    if(Frame<=0){
        Frame=AnimationData:count()
    }
    if(Frame>AnimationData:count()){
        Frame=1
    }
    for(I=1,9){
        holoAng(I,holoEntity(I):parent():toWorld(AnimationData[clamp(Frame,1,AnimationData:count()),table][I,angle]))
    }
}
if(changed(owner():keyPressed(Config["PlayButton",string]))&owner():keyPressed(Config["PlayButton",string])&!owner():inNoclip()&WeaponOK){
    Play=!Play
    FrameTime=0
}
Frame=clamp(Frame,0,AnimationData:count()+1)
if(Frame<=0){
    Frame=AnimationData:count()
}
if(Frame>AnimationData:count()){
    Frame=1
}

if(changed(owner():keyPressed(Config["SwitchAxis",string]))&owner():keyPressed(Config["SwitchAxis",string])&WeaponOK){
    Axis++
    if(Axis>3){
        Axis=1
    }
    holoAng(1001,holoEntity(BoneID):toWorld(ang(90*(Axis==2),90*(Axis==1),90*(Axis==3))))
    print(select(Axis,"Axis: X","Axis: Y","Axis: Z"))
}
if(changed(owner():keyPressed(Config["ParentToLocal",string]))&owner():keyPressed(Config["ParentToLocal",string])&WeaponOK){
    ParentToLocal=!ParentToLocal
    print(select(ParentToLocal+1,"Parent: Parent","Parent: Self"))
    holoAng(1001,holoEntity(BoneID):toWorld(ang(90*(Axis==2),90*(Axis==1),90*(Axis==3))))
}
if(changed(BoneID)){
    if(BoneID>9){
        BoneID=1
    }
    if(BoneID==0){
        BoneID=9
    }
    for(I=1,9){
        holoColor(I,(I==BoneID) ? vec(0,255,0) : vec(255,255,255))
    }
    CurAng=holoEntity(BoneID):angles()
    holoPos(1001,holoEntity(BoneID):pos())
    holoAng(1001,holoEntity(BoneID):toWorld(ang(90*(Axis==2),90*(Axis==1),90*(Axis==3))))
    holoParent(1001,holoEntity(BoneID))
}
if(owner():keyPressed(Config["RotateBone",string])){
    Ang=CurAng:rotateAroundAxis(ParentToLocal ? holoEntity(BoneID):toWorld(vec(Axis==1,Axis==2,Axis==3))-holoEntity(BoneID):pos() : holoEntity(BoneID):parent():toWorld(vec(Axis==1,Axis==2,Axis==3))-holoEntity(BoneID):parent():pos(),owner():eyeAngles():pitch()-CurPitch)
    holoAng(BoneID,Ang)
}else{
    CurAng=holoEntity(BoneID):angles()
    CurPitch=owner():eyeAngles():pitch()
}
if(!ParentToLocal){
    holoAng(1001,holoEntity(BoneID):parent():toWorld(ang(90*(Axis==2),90*(Axis==1),90*(Axis==3))))
}
if(changed(owner():keyPressed(Config["RotateBone",string]))){
    if(owner():keyPressed(Config["RotateBone",string])){
        
    }else{
        
    }
}
event tick(){
if(Play){
    AnimationTime=(AnimationData[clamp(Frame,1,AnimationData:count()),table][11,number]/60)
    CurrentFrameTime=AnimationData[clamp(Frame,1,AnimationData:count()),table][10,number]
    FrameTime+=1*AnimationTime
    if(FrameTime>CurrentFrameTime){
        FrameTime=0
        Frame++
        Frame=clamp(Frame,0,AnimationData:count()+1)
        if(Frame<=0){
            Frame=AnimationData:count()
        }
        if(Frame>AnimationData:count()){
            Frame=1
        }
    }
    FrameTime=clamp(FrameTime,0,CurrentFrameTime)
    for(I=1,9){
        local LastFrame=AnimationData[clamp(Frame,1,AnimationData:count()),table][I,angle]
        local NextFrame=AnimationData[((clamp(Frame,1,AnimationData:count())+1)==AnimationData:count()+1) ? 1 : clamp(Frame,1,AnimationData:count())+1,table][I,angle]
        holoAng(I,holoEntity(I):parent():toWorld(slerp(quat(LastFrame),quat(NextFrame),FrameTime/CurrentFrameTime):toAngle()))
    }
}
}
event chat(Player:entity, Message:string, _) {
    if(Player==owner()){
        LS=Message:explode(" ")
        
        if(Message:explode("")[1,string]=="."){
            hideChat(1)
            print(Message)
        }
        
        switch(LS[1,string]){
            case ".axis",
                switch(LS[2,string]){
                    case "x",
                        Axis=1
                    break
                    case "y",
                        Axis=2
                    break
                    case "z",
                        Axis=3
                    break
                }
            break
            
            case ".angle",
                switch(LS[2,string]){
                    case "set",
                        switch(LS[3,string]){
                            case "x",
                                if(LS[4,string]){
                                    local LocalAng=holoEntity(BoneID):parent():toLocal(holoEntity(BoneID):angles())
                                    holoAng(BoneID,holoEntity(BoneID):parent():toWorld(ang(LS[4,string]:toNumber(),LocalAng:yaw(),LocalAng:roll())))
                                }
                            break
                            case "y",
                                if(LS[4,string]){
                                    local LocalAng=holoEntity(BoneID):parent():toLocal(holoEntity(BoneID):angles())
                                    holoAng(BoneID,holoEntity(BoneID):parent():toWorld(ang(LocalAng:pitch(),LS[4,string]:toNumber(),LocalAng:roll())))
                                }
                            break
                            case "z",
                                if(LS[4,string]){
                                    local LocalAng=holoEntity(BoneID):parent():toLocal(holoEntity(BoneID):angles())
                                    holoAng(BoneID,holoEntity(BoneID):parent():toWorld(ang(LocalAng:pitch(),LocalAng:yaw(),LS[4,string]:toNumber())))
                                }
                            break
                            case "local",
                                switch(LS[4,string]){
                                    case "x",
                                        if(LS[5,string]){
                                            holoAng(BoneID,holoEntity(BoneID):toWorld(ang(LS[5,string]:toNumber(),0,0)))
                                        }
                                    break
                                    case "y",
                                        if(LS[5,string]){
                                            holoAng(BoneID,holoEntity(BoneID):toWorld(ang(0,LS[5,string]:toNumber(),0)))
                                        }
                                    break
                                    case "z",
                                        if(LS[5,string]){
                                            holoAng(BoneID,holoEntity(BoneID):toWorld(ang(0,0,LS[5,string]:toNumber())))
                                        }
                                    break
                                    default,
                                        local SetX=LS[4,string]:toNumber()
                                        local SetY=LS[5,string]:toNumber()
                                        local SetZ=LS[6,string]:toNumber()
                                        holoAng(BoneID,holoEntity(BoneID):toWorld(ang(SetX,SetY,SetZ)))
                                    break
                                }
                            break
                            default,
                                local SetX=LS[4,string]:toNumber()
                                local SetY=LS[5,string]:toNumber()
                                local SetZ=LS[6,string]:toNumber()
                                holoAng(BoneID,holoEntity(BoneID):parent():toWorld(ang(SetX,SetY,SetZ)))
                            break
                        }
                    break
                    case "get",
                        switch(LS[3,string]){
                            case "x",
                                print(holoEntity(BoneID):parent():toLocal(holoEntity(BoneID):angles()):pitch())
                            break
                            case "y",
                                print(holoEntity(BoneID):parent():toLocal(holoEntity(BoneID):angles()):yaw())
                            break
                            case "z",
                                print(holoEntity(BoneID):parent():toLocal(holoEntity(BoneID):angles()):roll())
                            break
                            default,
                                print(holoEntity(BoneID):parent():toLocal(holoEntity(BoneID):angles()))
                            break
                        }
                    break
                    case "copy",
                        StoreData[1,angle]=ceil(holoEntity(BoneID):parent():toLocal(holoEntity(BoneID):angles()),3)
                        hint("Bone angles copied!",7)
                    break
                    case "paste",
                        holoAng(BoneID,holoEntity(BoneID):parent():toWorld(StoreData[1,angle]))
                        hint("Bone angles pasted!",7)
                    break
                }
            break
            case ".reset",
                for(I=1,9){
                    holoAng(I,holoEntity(1000):toWorld(ang()))
                }
            break
            case ".save",
                if(fileCanWrite()){
                    for(I=1,AnimationData:count()){
                        local FrameTable=AnimationData[I,table]
                        Angles[I,string]="table(
"+FrameTable[1,angle]+",
"+FrameTable[2,angle]+",
"+FrameTable[3,angle]+",
"+FrameTable[4,angle]+",
"+FrameTable[5,angle]+",
"+FrameTable[6,angle]+",
"+FrameTable[7,angle]+",
"+FrameTable[8,angle]+",
"+FrameTable[9,angle]+",
"+ceil(FrameTable[10,number],3)+",
"+ceil(FrameTable[11,number],1)+")"
+(I==AnimationData:count() ? "" : ",")
                    }
                    AnimationDataToString=Angles:concat("
")
                    if(LS[2,string]){
                        AnimationFileName=LS[2,string]:upper()
                    }else{
                        AnimationFileName=Animation
                    }
                    AnimationFileName=AnimationFileName:upper():find("ANIM_") ? AnimationFileName : "ANIM_"+AnimationFileName:upper()
                    AnimationName=Animation=AnimationFileName
                    
                    Header=format("@persist "+AnimationFileName+":table")
                    Code=AnimationFileName+"=table("+AnimationDataToString+")"
                    fileWrite(">e2shared/slashblade_project/dev/animation_library/anims/"+AnimationFileName+".txt",Header+"
"+Code)
                    hint("File written: /slashblade_project/dev/animation_library/anims/"+AnimationFileName+".txt",7)
                }else{
                    hint("File could not be written: ANIM_"+LS[2,string]:upper()+".txt",7)
                }
                
            break
            case ".frame",
                switch(LS[2,string]){
                    case "add",
                        hint("Added frame",7)
                        AnimationData[Frame+1,table]=table()
                        for(I=1,9){
                            AnimationData[Frame+1,table][I,angle]=ang(0,0,0)
                        }
                        AnimationData[Frame+1,table][10,number]=30
                        AnimationData[Frame+1,table][11,number]=60
                    break
                    case "remove",
                        hint("Frame "+Frame+" removed!",7)
                        AnimationData:removeTable(Frame)
                    break
                    case "store",
                        for(I=1,9){
                            AnimationData[Frame,table][I,angle]=ceil(holoEntity(I):parent():toLocal(holoEntity(I):angles()),3)
                        }
                        hint("Pose assigned to current frame!",7)
                    break
                    case "save",
                        if(LS[3,string]){
                            StoreData=table()
                            for(I=1,9){
                                StoreData[I,angle]=ceil(holoEntity(1000):toLocal(holoEntity(I):angles()),3)
                            }
                            if(fileCanWrite()){
                                fileWrite(">e2shared/slashblade_project/dev/animation_library/frames/"+"FRAME_"+LS[3,string]:upper()+"_FRAME_"+(Frame<10 ? "00" : Frame<100 ? "0" : "")+Frame+".txt",+"\""+StoreData:concat("\"
\"")+"\"")
                                hint("File written: /slashblade_project/dev/animation_library/frames/FRAME_"+LS[3,string]:upper()+"_FRAME_"+(Frame<10 ? "00" : Frame<100 ? "0" : "")+Frame+".txt",7)
                            }else{
                                hint("File could not be written: FRAME_"+LS[3,string]:upper()+".txt",7)
                            }
                        }
                    break
                    case "load",
                        if(LS[3,string]){
                            if(fileCanLoad()){
                                fileLoad(">e2shared/slashblade_project/dev/animation_library/frames/FRAME_"+LS[3,string]:lower()+"_FRAME_"+(Frame<10 ? "00" : Frame<100 ? "0" : "")+Frame+".txt")
                            }else{
                                hint("File could not be loaded: FRAME_"+LS[3,string]:upper()+"_FRAME_"+(Frame<10 ? "00" : Frame<100 ? "0" : "")+Frame+".txt",7)
                            }
                        }
                    break
                    case "copy",
                        for(I=1,9){
                            StoreData[I,angle]=ceil(holoEntity(1000):toLocal(holoEntity(I):angles()),3)
                        }
                        hint("Frame copied!",7)
                    break
                    case "paste",
                        for(I=1,9){
                            holoAng(I,holoEntity(1000):toWorld(StoreData[I,angle]))
                        }
                        hint("Frame pasted!",7)
                    break
                    case "length",
                        if(LS[3,string]){
                            AnimationData[Frame,table][10,number]=LS[3,string]:toNumber()
                            hint("Frame length set to "+LS[3,string]+"!",7)
                        }
                    break
                }
            break
            case ".speed",
                if(LS[2,string]){
                    for(I=1,AnimationData:count()){
                        AnimationData[I,table][11,number]=LS[2,string]:toNumber()
                    }
                    hint("Animation speed set to "+LS[2,string]+"!",7)
                }
            break
            case ".frames",
                if(LS[2,string]){
                    for(I=1,AnimationData:count()){
                        AnimationData[I,table][10,number]=LS[2,string]:toNumber()
                    }
                    hint("All frame lengths set to "+LS[2,string]+"!",7)
                }
            break
            case ".load",
                if(LS[2,string]){
                    Play=0
                    Frame=1
                    Animation=(LS[2,string]:upper():find("ANIM_") ? LS[2,string]:upper() : "ANIM_"+LS[2,string]:upper())
                    AnimationName=Animation
                    Success=1
                    switch(Animation:upper()){
                        case "ANIM_BASE_TEST",
                            AnimationData=ANIM_BASE_TEST
                        break
                        case "ANIM_TPOSE",
                            AnimationData=ANIM_TPOSE
                        break
                        case "ANIM_IDLE_01",
                            AnimationData=ANIM_IDLE_01
                        break
                        case "ANIM_ATTACK_01",
                            AnimationData=ANIM_ATTACK_01
                        break
                        case "ANIM_UPPER_01",
                            AnimationData=ANIM_UPPER_01
                        break
                        case "ANIM_UPPER_01_SHEATH",
                            AnimationData=ANIM_UPPER_01_SHEATH
                        break
                        case "ANIM_UPPER_02",
                            AnimationData=ANIM_UPPER_02
                        break
                        case "ANIM_UPPER_02_SHEATH",
                            AnimationData=ANIM_UPPER_02_SHEATH
                        break
                        case "ANIM_DOWN_01",
                            AnimationData=ANIM_DOWN_01
                        break
                        case "ANIM_DOWN_01_SHEATH",
                            AnimationData=ANIM_DOWN_01_SHEATH
                        break
                        case "ANIM_FORWARD_01",
                            AnimationData=ANIM_FORWARD_01
                        break
                        case "ANIM_FORWARD_01_SHEATH",
                            AnimationData=ANIM_FORWARD_01_SHEATH
                        break
                        case "ANIM_JUDGEMENT_CUT_START",
                            AnimationData=ANIM_JUDGEMENT_CUT_START
                        break
                        case "ANIM_JUDGEMENT_CUT",
                            AnimationData=ANIM_JUDGEMENT_CUT
                        break
                        case "ANIM_JUDGEMENT_CUT_SHEATH",
                            AnimationData=ANIM_JUDGEMENT_CUT_SHEATH
                        break
                        case "ANIM_TEST",
                            AnimationData=ANIM_TEST
                        break
                        case "ANIM_NEW",
                            AnimationName="UNNAMED"
                            AnimationData=ANIM_TPOSE
                        break
                        default,
                            AnimationName="UNKNOWN"
                            AnimationData=ANIM_TPOSE
                            Success=0
                        break
                    }
                    for(I=1,9){
                        holoAng(I,holoEntity(I):parent():toWorld(AnimationData[clamp(Frame,1,AnimationData:count()),table][I,angle]))
                    }
                    hint((Success ? "Loaded animation "+Animation : "Animation ANIM_"+LS[2,string]:upper()+" could not be loaded")+"!",7)
                }
            break
            case ".new",
                if(LS[2,string]){
                    Play=0
                    Frame=1
                    Success=0
                    Animation="ANIM_"+LS[2,string]:upper()
                    switch(Animation:upper()){
                        case "ANIM_BASE_TEST",
                            
                        break
                        case "ANIM_TPOSE",
                            
                        break
                        case "ANIM_IDLE_01",
                            
                        break
                        case "ANIM_ATTACK_01",
                            
                        break
                        case "ANIM_UPPER_01",
                        
                        break
                        case "ANIM_UPPER_01_SHEATH",
                            
                        break
                        case "ANIM_UPPER_02",
                        
                        break
                        case "ANIM_UPPER_02_SHEATH",
                            
                        break
                        case "ANIM_FORWARD_01",
                        
                        break
                        case "ANIM_FORWARD_01_SHEATH",
                            
                        break
                        case "ANIM_DOWN_01",
                            
                        break
                        case "ANIM_DOWN_01_SHEATH",
                            
                        break
                        case "ANIM_JUDGEMENT_CUT_START",
                        
                        break
                        case "ANIM_JUDGEMENT_CUT",
                        
                        break
                        case "ANIM_JUDGEMENT_CUT_SHEATH",
                        
                        break
                        case "ANIM_TEST",
                            
                        break
                        case "ANIM_NEW",
                            
                        break
                        default,
                            AnimationName="NEW"
                            AnimationData=ANIM_TPOSE
                            Success=1
                        break
                    }
                    if(Success){
                        AnimationName=Animation
                        AnimationData=ANIM_TPOSE
                        for(I=1,9){
                            holoAng(I,holoEntity(I):parent():toWorld(AnimationData[clamp(Frame,1,AnimationData:count()),table][I,angle]))
                        }
                        hint("New animation started!",7)
                    }else{
                        hint("This animation already exists, save over it to overwrite!",7)
                    }
                    
                }else{
                    Play=0
                    Frame=1
                    Animation="ANIM_NEW"
                    AnimationName="UNNAMED"
                    AnimationData=ANIM_TPOSE
                    for(I=1,9){
                        holoAng(I,holoEntity(I):parent():toWorld(AnimationData[clamp(Frame,1,AnimationData:count()),table][I,angle]))
                    }
                    hint("New unnamed animation started!",7)
                }
            break
        }
    }
}
event fileErrored(FilePath:string, Status:number) {
    hint("File "+FilePath+" could not be loaded ("+Status+")",7)
}
event fileLoaded(FilePath:string, Data:string) {
    hint("File loaded: "+FilePath,7)
    local GetData=Data:explode("
")
    for(I=1,9){
        local Ex=GetData[I,string]:explode(" ")
        local AngSet=holoEntity(1000):toWorld(ang(Ex[1,string]:replace("\"",""):toNumber(),Ex[2,string]:toNumber(),Ex[3,string]:replace("\"",""):toNumber()))
        holoAng(I,AngSet)
    }
}
event removed(_) {
    owner():plySetJumpPower(200)
}
function void refreshScreen(){
    for(C=1,9){
        local Index=13+(C+1)*10
        local Angle=ceil(AnimationData[Frame,table][C,angle])
        EGP:egpSetText(Index,Angle:toString())
    }
    EGP:egpSetText(8,AnimationName:upper():find("ANIM_") ? AnimationName:upper() : "ANIM_"+AnimationName:upper())
    EGP:egpSetText(9,"FRAME_"+(Frame<10 ? "00" : Frame<100 ? "0" : "")+Frame)
    EGP:egpSetText(10,AnimationData[Frame,table][10,number]:toString())
    EGP:egpSetText(11,AnimationData[Frame,table][11,number]:toString())
}
refreshScreen()
